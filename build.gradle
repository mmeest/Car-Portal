plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.2'
    id 'io.spring.dependency-management' version '1.1.4'
}

group = 'ee.bcs'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '21'
}

repositories {
    mavenCentral()
}

dependencies {
    // Spring Boot
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework:spring-test'
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // Swagger
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0'

    // Lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // PostgreSQL
    runtimeOnly 'org.postgresql:postgresql'

    // H2 Database
    testImplementation 'com.h2database:h2'

    // MapStruct
    implementation 'org.mapstruct:mapstruct:1.5.5.Final'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'
}

compileJava {
    // Ignoring Unmapped Properties (no error, no warning), Inject Spring Components into the Mapper
    options.compilerArgs += ['-Amapstruct.unmappedTargetPolicy=IGNORE', '-Amapstruct.defaultComponentModel=spring']
}

tasks.named('test') {
    useJUnitPlatform()
}


// Register the task to install Git hooks
tasks.register('installGitHooks', Copy) {
    description = 'Installs Git hooks'
    from fileTree('hooks') {
        include '**/*'
    }
    into '.git/hooks'
    doLast {
        fileTree('.git/hooks').files.each { file ->
            file.setExecutable(true)
        }
        println 'Git hooks installed.'
    }
}

// Automatically run the 'installGitHooks' task after project evaluation
gradle.projectsEvaluated {
    tasks.withType(JavaCompile).configureEach {
        dependsOn(tasks.named('installGitHooks'))
    }
}

